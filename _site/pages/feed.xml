<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>袁兆祎的博客</title>
    <description>袁兆祎的博客
</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 18 Dec 2017 19:01:42 +0800</pubDate>
    <lastBuildDate>Mon, 18 Dec 2017 19:01:42 +0800</lastBuildDate>
    <generator>Jekyll v3.6.2</generator>
    
      <item>
        <title>Mongodb</title>
        <description>&lt;h3 id=&quot;mongodb基础&quot;&gt;MongoDB基础&lt;/h3&gt;
&lt;h4 id=&quot;连接&quot;&gt;连接&lt;/h4&gt;
&lt;p&gt;mongo -u data_online -p dataonline –authenticationDatabase data_account –host localhost –port 27017&lt;/p&gt;
&lt;h4 id=&quot;用户相关&quot;&gt;用户相关&lt;/h4&gt;
&lt;h5 id=&quot;1-添加一个用户&quot;&gt;1. 添加一个用户&lt;/h5&gt;
&lt;h6 id=&quot;用dbcreateuser方法如果用户存在则返回一个用户重复错误&quot;&gt;用db.createUser()方法，如果用户存在则返回一个用户重复错误`&lt;/h6&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;db.createUser(user, writeConcern)
    user: 这个文档创建关于用户的身份认证和访问信息；
    writeConcern: 这个文档描述保证MongoDB提供写操作的成功报告。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;user文档，定义了用户的以下形式：&lt;/p&gt;
  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{ user: &quot;&amp;lt;name&amp;gt;&quot;,
  pwd: &quot;&amp;lt;cleartext password&amp;gt;&quot;,
  customData: { &amp;lt;any information&amp;gt; },
  roles: [
    { role: &quot;&amp;lt;role&amp;gt;&quot;, db: &quot;&amp;lt;database&amp;gt;&quot; } | &quot;&amp;lt;role&amp;gt;&quot;,
    ...
  ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
  &lt;p&gt;user文档字段介绍：&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;user字段，为新用户的名字；
pwd字段，用户的密码；
cusomData字段，为任意内容，例如可以为用户全名介绍；
roles字段，指定用户的角色，可以用一个空数组给新用户设定空角色；
在roles字段,可以指定内置角色和用户定义的角色。&lt;/p&gt;

&lt;p&gt;Built-In Roles（内置角色）：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;数据库用户角色：read、readWrite;&lt;/li&gt;
  &lt;li&gt;数据库管理角色：dbAdmin、dbOwner、userAdmin；&lt;/li&gt;
  &lt;li&gt;集群管理角色：clusterAdmin、clusterManager、clusterMonitor、hostManager；&lt;/li&gt;
  &lt;li&gt;备份恢复角色：backup、restore；&lt;/li&gt;
  &lt;li&gt;所有数据库角色：readAnyDatabase、readWriteAnyDatabase、userAdminAnyDatabase、dbAdminAnyDatabase&lt;/li&gt;
  &lt;li&gt;超级用户角色：root&lt;br /&gt;
// 这里还有几个角色间接或直接提供了系统超级用户的访问（dbOwner 、userAdmin、userAdminAnyDatabase）&lt;/li&gt;
  &lt;li&gt;内部角色：__system
PS：关于每个角色所拥有的操作权限可以点击上面的内置角色链接查看详情。&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
  &lt;p&gt;writeConcern文档(官方说明):&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;w选项：允许的值分别是 1、0、大于1的值、”majority”、&lt;tag set=&quot;&quot;&gt;；
j选项：确保mongod实例写数据到磁盘上的journal（日志），这可以确保mongd意外关闭不会丢失数据。设置true启用。
wtimeout：指定一个时间限制,以毫秒为单位。wtimeout只适用于w值大于1。&lt;/tag&gt;&lt;/p&gt;
&lt;h5 id=&quot;示例&quot;&gt;示例:&lt;/h5&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;创建：
use data_center
db.createUser( { &quot;user&quot; : &quot;data_online&quot;,
                 &quot;pwd&quot;: &quot;dataonline&quot;,
                 &quot;roles&quot; : [ { role: &quot;clusterAdmin&quot;, db: &quot;admin&quot; },
                             { role: &quot;readAnyDatabase&quot;, db: &quot;admin&quot; },
                             &quot;readWrite&quot;
                             ] },
               { w: &quot;majority&quot; , wtimeout: 5000 } )
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;验证：
mongo -u data_online -p dataonline –authenticationDatabase data_center&lt;/p&gt;
&lt;h6 id=&quot;用adduser方法&quot;&gt;用addUser方法&lt;/h6&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;db.addUser(&quot;name&quot;);
db.addUser(&quot;userName&quot;, &quot;pwd123&quot;, true); 添加用户、设置密码、是否只读
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h5 id=&quot;2-数据库认证安全模式&quot;&gt;2. 数据库认证、安全模式&lt;/h5&gt;
&lt;p&gt;db.auth(“userName”, “123123”);&lt;/p&gt;
&lt;h5 id=&quot;3-显示当前所有用户&quot;&gt;3. 显示当前所有用户&lt;/h5&gt;
&lt;p&gt;show users;&lt;/p&gt;
&lt;h5 id=&quot;4-删除用户&quot;&gt;4. 删除用户&lt;/h5&gt;
&lt;p&gt;db.removeUser(“userName”);&lt;/p&gt;
&lt;h4 id=&quot;数据库常用命令&quot;&gt;数据库常用命令:&lt;/h4&gt;
&lt;h5 id=&quot;1-help查看命令提示&quot;&gt;1. Help查看命令提示&lt;/h5&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;help
db.help();
db.yourColl.help();
db.youColl.find().help();
rs.help();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h5 id=&quot;2-切换创建数据库&quot;&gt;2. 切换/创建数据库&lt;/h5&gt;
&lt;p&gt;use yourDB; //当创建一个集合(table)的时候会自动创建当前数据库&lt;/p&gt;
&lt;h5 id=&quot;3-查询所有数据库&quot;&gt;3. 查询所有数据库&lt;/h5&gt;
&lt;p&gt;show dbs;&lt;/p&gt;
&lt;h5 id=&quot;4-删除当前使用数据库&quot;&gt;4. 删除当前使用数据库&lt;/h5&gt;
&lt;p&gt;db.dropDatabase();&lt;/p&gt;
&lt;h5 id=&quot;5-从指定主机上克隆数据库&quot;&gt;5. 从指定主机上克隆数据库&lt;/h5&gt;
&lt;p&gt;db.cloneDatabase(“127.0.0.1”); //将指定机器上的数据库的数据克隆到当前数据库&lt;/p&gt;
&lt;h5 id=&quot;6-从指定的机器上复制指定数据库数据到某个数据库&quot;&gt;6. 从指定的机器上复制指定数据库数据到某个数据库&lt;/h5&gt;
&lt;p&gt;db.copyDatabase(“mydb”, “temp”, “127.0.0.1”);将本机的mydb的数据复制到temp数据库中&lt;/p&gt;
&lt;h5 id=&quot;7-修复当前数据库&quot;&gt;7. 修复当前数据库&lt;/h5&gt;
&lt;p&gt;db.repairDatabase();&lt;/p&gt;
&lt;h5 id=&quot;8-查看当前使用的数据库&quot;&gt;8. 查看当前使用的数据库&lt;/h5&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;db.getName();
db; db和getName方法是一样的效果，都可以查询当前使用的数据库
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h5 id=&quot;9-显示当前db状态&quot;&gt;9. 显示当前db状态&lt;/h5&gt;
&lt;p&gt;db.stats();&lt;/p&gt;
&lt;h5 id=&quot;10-当前db版本&quot;&gt;10. 当前db版本&lt;/h5&gt;
&lt;p&gt;db.version();&lt;/p&gt;
&lt;h5 id=&quot;11-查看当前db的链接机器地址&quot;&gt;11. 查看当前db的链接机器地址&lt;/h5&gt;
&lt;p&gt;db.getMongo();&lt;/p&gt;
&lt;h4 id=&quot;collection聚集集合&quot;&gt;Collection聚集集合&lt;/h4&gt;
&lt;h5 id=&quot;1-创建一个聚集集合table&quot;&gt;1. 创建一个聚集集合（table）&lt;/h5&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;db.createCollection(“collName”, {size: 20, capped: 5, max: 100});//创建成功会显示{“ok”:1}
//判断集合是否为定容量db.collName.isCapped();
db.createCollection(&quot;tianji_verify&quot;),
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h5 id=&quot;2-得到指定名称的聚集集合table&quot;&gt;2. 得到指定名称的聚集集合（table）&lt;/h5&gt;
&lt;p&gt;db.getCollection(“account”);&lt;/p&gt;
&lt;h5 id=&quot;3-得到当前db的所有聚集集合&quot;&gt;3. 得到当前db的所有聚集集合&lt;/h5&gt;
&lt;p&gt;db.getCollectionNames();&lt;/p&gt;
&lt;h5 id=&quot;4-显示当前db所有聚集索引的状态&quot;&gt;4. 显示当前db所有聚集索引的状态&lt;/h5&gt;
&lt;p&gt;db.printCollectionStats();&lt;/p&gt;
&lt;h4 id=&quot;聚集集合查询&quot;&gt;聚集集合查询&lt;/h4&gt;
&lt;h5 id=&quot;1-查询所有记录&quot;&gt;1. 查询所有记录&lt;/h5&gt;
&lt;p&gt;db.userInfo.find();&lt;/p&gt;

&lt;p&gt;相当于：select* from userInfo;&lt;/p&gt;

&lt;p&gt;默认每页显示20条记录，当显示不下的情况下，可以用it迭代命令查询下一页数据。注意：键入it命令不能带“；”
但是你可以设置每页显示数据的大小，用DBQuery.shellBatchSize= 50;这样每页就显示50条记录了。&lt;/p&gt;
&lt;h5 id=&quot;2-条件查询&quot;&gt;2. 条件查询&lt;/h5&gt;
&lt;blockquote&gt;
  &lt;p&gt;查询age = 22的记录&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;db.userInfo.find({“age”: 22});&lt;/p&gt;

&lt;p&gt;相当于： select * from userInfo where age = 22;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;查询age &amp;gt; 22的记录&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;db.userInfo.find({age: {$gt: 22}});&lt;/p&gt;

&lt;p&gt;相当于：select * from userInfo where age &amp;gt;22;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;查询age &amp;lt; 22的记录&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;db.userInfo.find({age: {$lt: 22}});&lt;/p&gt;

&lt;p&gt;相当于：select * from userInfo where age &amp;lt;22;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;查询age &amp;gt;= 25的记录&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;db.userInfo.find({age: {$gte: 25}});&lt;/p&gt;

&lt;p&gt;相当于：select * from userInfo where age &amp;gt;= 25;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;查询age &amp;lt;= 25的记录&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;db.userInfo.find({age: {$lte: 25}});&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;查询age &amp;gt;= 23 并且 age &amp;lt;= 26&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;db.userInfo.find({age: {$gte: 23, $lte: 26}});&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;查询name = zhangsan, age = 22的数据&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;db.userInfo.find({name: ‘zhangsan’, age: 22});&lt;/p&gt;

&lt;p&gt;相当于：select * from userInfo where name = ‘zhangsan’ and age = ‘22’;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;时间条件
db.user_record.find({apply_time: {$gt: ISODate(“2017-12-11T00:00:00Z”), $lte:ISODate(“2017-12-12T00:00:00Z”)}})&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&quot;3-or与-查询&quot;&gt;3. or与 查询&lt;/h5&gt;

&lt;p&gt;db.userInfo.find({$or: [{age: 22}, {age: 25}]});&lt;/p&gt;

&lt;p&gt;相当于：select * from userInfo where age = 22 or age = 25;&lt;/p&gt;

&lt;h5 id=&quot;4-模糊匹配&quot;&gt;4. 模糊匹配&lt;/h5&gt;
&lt;blockquote&gt;
  &lt;p&gt;查询name中包含mongo的数据&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;db.userInfo.find({name: /mongo/});&lt;/p&gt;

&lt;p&gt;相当于: %% [sql]select * from userInfo where name like ‘%mongo%’;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;查询name中以mongo开头的&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;db.userInfo.find({name: /^mongo/});&lt;/p&gt;

&lt;p&gt;相当于：select * from userInfo where name like ‘mongo%’;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;正则匹配&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;db.user_record.find(user_id:{$regex:”rstxjd.*”}})&lt;/p&gt;

&lt;h5 id=&quot;5-结果过滤&quot;&gt;5. 结果过滤&lt;/h5&gt;
&lt;blockquote&gt;
  &lt;p&gt;查询指定列name、age数据&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;db.userInfo.find({}, {name: 1, age: 1});&lt;/p&gt;

&lt;p&gt;相当于: select name, age from userInfo;&lt;/p&gt;

&lt;p&gt;当然name也可以用true或false,当用ture的情况下河name:1效果一样，如果用false就是排除name，显示name以外的列信息。&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;查询指定列name、age数据, age &amp;gt; 25&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;db.userInfo.find({age: {$gt: 25}}, {name: 1, age: 1});&lt;/p&gt;

&lt;p&gt;相当于：select name, age from userInfo where age &amp;gt;25;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;查询第一条数据&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;db.userInfo.findOne();&lt;/p&gt;

&lt;p&gt;db.userInfo.find().limit(1);&lt;/p&gt;

&lt;p&gt;相当于：selecttop 1 * from userInfo;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;查询前5条数据&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;db.userInfo.find().limit(5);&lt;/p&gt;

&lt;p&gt;相当于：selecttop 5 * from userInfo;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;查询10条以后的数据&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;db.userInfo.find().skip(10);&lt;/p&gt;

&lt;p&gt;相当于：select * from userInfo where id not in (selecttop 10 * from userInfo);&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;查询在5-10之间的数据&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;db.userInfo.find().limit(10).skip(5);&lt;/p&gt;

&lt;p&gt;可用于分页，limit是pageSize，skip是第几页*pageSize&lt;/p&gt;

&lt;h5 id=&quot;6-结果排序&quot;&gt;6. 结果排序&lt;/h5&gt;

&lt;p&gt;升序：db.userInfo.find().sort({age: 1});&lt;/p&gt;

&lt;p&gt;降序：db.userInfo.find().sort({age: -1});&lt;/p&gt;

&lt;h5 id=&quot;7-结果去重&quot;&gt;7. 结果去重&lt;/h5&gt;
&lt;p&gt;db.userInfo.distinct(“name”);&lt;/p&gt;

&lt;p&gt;会过滤掉name中的相同数据&lt;/p&gt;

&lt;p&gt;相当于：select distict(name) from userInfo;&lt;/p&gt;

&lt;h5 id=&quot;8-结果数量统计&quot;&gt;8. 结果数量统计&lt;/h5&gt;

&lt;blockquote&gt;
  &lt;p&gt;普通计数&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;db.userInfo.find({age: {$gte: 25}}).count();&lt;/p&gt;

&lt;p&gt;相当于：select count(*) from userInfo where age &amp;gt;= 20;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;按照某列进行计数&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;db.userInfo.find({sex: {$exists: true}}).count();&lt;/p&gt;

&lt;p&gt;相当于：select count(sex) from userInfo;&lt;/p&gt;

&lt;h4 id=&quot;索引&quot;&gt;索引&lt;/h4&gt;
&lt;h5 id=&quot;1-创建索引&quot;&gt;1. 创建索引&lt;/h5&gt;
&lt;p&gt;db.userInfo.ensureIndex({name: 1});&lt;/p&gt;

&lt;p&gt;db.userInfo.ensureIndex({name: 1, ts: -1});&lt;/p&gt;

&lt;h5 id=&quot;2-查询当前聚集集合所有索引&quot;&gt;2. 查询当前聚集集合所有索引&lt;/h5&gt;
&lt;p&gt;db.userInfo.getIndexes();&lt;/p&gt;

&lt;h5 id=&quot;3-查看总索引记录大小&quot;&gt;3. 查看总索引记录大小&lt;/h5&gt;
&lt;p&gt;db.userInfo.totalIndexSize();&lt;/p&gt;

&lt;h5 id=&quot;4-读取当前集合的所有index信息&quot;&gt;4. 读取当前集合的所有index信息&lt;/h5&gt;
&lt;p&gt;db.users.reIndex();&lt;/p&gt;

&lt;h5 id=&quot;5-删除指定索引&quot;&gt;5. 删除指定索引&lt;/h5&gt;
&lt;p&gt;db.users.dropIndex(“name_1”);&lt;/p&gt;

&lt;h4 id=&quot;修改添加删除集合数据&quot;&gt;修改、添加、删除集合数据&lt;/h4&gt;
&lt;h5 id=&quot;1-添加&quot;&gt;1. 添加&lt;/h5&gt;

&lt;p&gt;db.users.save({name: ‘zhangsan’, age: 25, sex: true});&lt;/p&gt;

&lt;p&gt;添加的数据的数据列，没有固定，根据添加的数据为准&lt;/p&gt;
&lt;h5 id=&quot;2-修改&quot;&gt;2. 修改&lt;/h5&gt;

&lt;p&gt;db.users.update({age: 25}, {$set: {name: ‘changeName’}}, false, true);&lt;/p&gt;

&lt;p&gt;相当于：update users set name = ‘changeName’ where age = 25;&lt;/p&gt;

&lt;p&gt;db.users.update({name: ‘Lisi’}, {$inc: {age: 50}}, false, true);&lt;/p&gt;

&lt;p&gt;相当于：update users set age = age + 50 where name = ‘Lisi’;&lt;/p&gt;

&lt;p&gt;db.users.update({name: ‘Lisi’}, {$inc: {age: 50}, $set: {name: ‘hoho’}}, false, true);&lt;/p&gt;

&lt;p&gt;相当于：update users set age = age + 50, name = ‘hoho’ where name = ‘Lisi’;&lt;/p&gt;

&lt;h5 id=&quot;3-删除&quot;&gt;3. 删除&lt;/h5&gt;

&lt;p&gt;db.users.remove({age: 132});&lt;/p&gt;

&lt;h5 id=&quot;4-查询修改删除&quot;&gt;4. 查询修改删除&lt;/h5&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;db.users.findAndModify({
    query: {age: {$gte: 25}}, 
    sort: {age: -1}, 
    update: {$set: {name: 'a2'}, $inc: {age: 2}},
    remove: true
});
db.runCommand({ findandmodify : &quot;users&quot;, 
    query: {age: {$gte: 25}}, 
    sort: {age: -1}, 
    update: {$set: {name: 'a2'}, $inc: {age: 2}},
    remove: true
});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;update 或 remove 其中一个是必须的参数; 其他参数可选。
参数 |详解 | 默认值
—|—|—
query | 查询过滤条件 | {} 
sort | 如果多个文档符合查询过滤条件，将以该参数指定的排列方式选择出排在首位的对象，该对象将被操作 | {} 
remove | 若为true，被选中对象将在返回前被删除 | N/A 
update | 一个 修改器对象 | N/A 
new	| 若为true，将返回修改后的对象而不是原始对象。在删除操作中，该参数被忽略。 | false 
fields | 参见Retrieving a Subset of Fields (1.5.0+) | All fields 
upsert | 创建新对象若查询结果为空。示例 (1.5.4+) | false&lt;/p&gt;

&lt;h4 id=&quot;语句块操作&quot;&gt;语句块操作&lt;/h4&gt;
&lt;h5 id=&quot;1-简单hello-world&quot;&gt;1. 简单Hello World&lt;/h5&gt;
&lt;p&gt;print(“Hello World!”);&lt;/p&gt;

&lt;p&gt;这种写法调用了print函数，和直接写入”Hello World!”的效果是一样的；&lt;/p&gt;
&lt;h5 id=&quot;2-将一个对象转换成json&quot;&gt;2. 将一个对象转换成json&lt;/h5&gt;
&lt;p&gt;tojson(new Object());&lt;/p&gt;

&lt;p&gt;tojson(new Object(‘a’));&lt;/p&gt;

&lt;h5 id=&quot;3-循环添加数据&quot;&gt;3. 循环添加数据&lt;/h5&gt;
&lt;blockquote&gt;
  &lt;p&gt;这样就循环添加了30条数据，同样也可以省略括号的写法&lt;/p&gt;
  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;for (var i = 0; i &amp;lt; 30; i++) {
db.users.save({name: &quot;u_&quot; + i, age: 22 + i, sex: i % 2});
};
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
  &lt;p&gt;也是可以的，当你用db.users.find()查询的时候，显示多条数据而无法一页显示的情况下，可以用it查看下一页的信息；&lt;/p&gt;
  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;for (var i = 0; i &amp;lt; 30; i++) db.users.save({name: &quot;u_&quot; + i, age: 22 + i, sex: i % 2});
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;h5 id=&quot;4-find-游标查询&quot;&gt;4. find 游标查询&lt;/h5&gt;
&lt;blockquote&gt;
  &lt;p&gt;这样就查询所有的users信息，同样可以这样写&lt;/p&gt;
  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var cursor = db.users.find();
while (cursor.hasNext()) { 
    printjson(cursor.next()); 
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
  &lt;p&gt;同样可以省略{}号&lt;/p&gt;
  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var cursor = db.users.find();
while (cursor.hasNext()) { printjson(cursor.next); }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
  &lt;h5 id=&quot;5-foreach迭代循环&quot;&gt;5. forEach迭代循环&lt;/h5&gt;
  &lt;p&gt;db.users.find().forEach(printjson);&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;forEach中必须传递一个函数来处理每条迭代的数据信息&lt;/p&gt;
&lt;h5 id=&quot;6-将find游标当数组处理&quot;&gt;6. 将find游标当数组处理&lt;/h5&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var cursor = db.users.find();
cursor[4];
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;取得下标索引为4的那条数据
既然可以当做数组处理，那么就可以获得它的长度：cursor.length();或者cursor.count();
那样我们也可以用循环显示数据:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;for (var i = 0, len = c.length(); i &amp;lt; len; i++) printjson(c[i]);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h5 id=&quot;7-将find游标转换成数组&quot;&gt;7. 将find游标转换成数组&lt;/h5&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; var arr = db.users.find().toArray();
&amp;gt; printjson(arr[2]);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;用toArray方法将其转换为数组&lt;/p&gt;
&lt;h5 id=&quot;8-定制我们自己的查询结果&quot;&gt;8. 定制我们自己的查询结果&lt;/h5&gt;
&lt;p&gt;只显示age &amp;lt;= 28的并且只显示age这列数据:&lt;/p&gt;

&lt;p&gt;db.users.find({age: {$lte: 28}}, {age: 1}).forEach(printjson);&lt;/p&gt;

&lt;p&gt;db.users.find({age: {$lte: 28}}, {age: true}).forEach(printjson);&lt;/p&gt;

&lt;p&gt;排除age的列:&lt;/p&gt;

&lt;p&gt;db.users.find({age: {$lte: 28}}, {age: false}).forEach(printjson);&lt;/p&gt;

&lt;h5 id=&quot;9-foreach传递函数显示信息&quot;&gt;9. forEach传递函数显示信息&lt;/h5&gt;

&lt;p&gt;db.things.find({x:4}).forEach(function(x) {print(tojson(x));});&lt;/p&gt;

&lt;h4 id=&quot;其他&quot;&gt;其他&lt;/h4&gt;
&lt;h5 id=&quot;1-查询之前的错误信息&quot;&gt;1. 查询之前的错误信息&lt;/h5&gt;

&lt;p&gt;db.getPrevError();&lt;/p&gt;

&lt;h5 id=&quot;2-清除错误记录&quot;&gt;2. 清除错误记录&lt;/h5&gt;

&lt;p&gt;db.resetError();&lt;/p&gt;

&lt;h5 id=&quot;3-查看聚集集合基本信息&quot;&gt;3. 查看聚集集合基本信息&lt;/h5&gt;
&lt;ul&gt;
  &lt;li&gt;查看帮助  db.yourColl.help();&lt;/li&gt;
  &lt;li&gt;查询当前集合的数据条数  db.yourColl.count();&lt;/li&gt;
  &lt;li&gt;查看数据空间大小 db.userInfo.dataSize();&lt;/li&gt;
  &lt;li&gt;得到当前聚集集合所在的db db.userInfo.getDB();&lt;/li&gt;
  &lt;li&gt;得到当前聚集的状态 db.userInfo.stats();&lt;/li&gt;
  &lt;li&gt;得到聚集集合总大小 db.userInfo.totalSize();&lt;/li&gt;
  &lt;li&gt;聚集集合储存空间大小 db.userInfo.storageSize();&lt;/li&gt;
  &lt;li&gt;Shard版本信息  db.userInfo.getShardVersion()&lt;/li&gt;
  &lt;li&gt;聚集集合重命名 db.userInfo.renameCollection(“users”); 将userInfo重命名为users&lt;/li&gt;
  &lt;li&gt;删除当前聚集集合 db.userInfo.drop();&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 18 Dec 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/12/18/MongoDB.html</link>
        <guid isPermaLink="true">http://localhost:4000/2017/12/18/MongoDB.html</guid>
        
        
      </item>
    
  </channel>
</rss>
